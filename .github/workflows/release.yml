name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            echo "version=v1.0.0" >> $GITHUB_OUTPUT
          else
            major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_patch=$((patch + 1))
            echo "version=v$major.$minor.$new_patch" >> $GITHUB_OUTPUT
          fi

      - name: Create new tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.get_latest_tag.outputs.version }}
          git push origin ${{ steps.get_latest_tag.outputs.version }}

      - name: Generate release notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            const notes = commits.data
              .map(commit => `- ${commit.commit.message}`)
              .join('\n');
            
            return notes;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.version }}
          body: ${{ steps.generate_notes.outputs.result }}
          draft: false
          prerelease: false